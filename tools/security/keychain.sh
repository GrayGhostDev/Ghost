#!/usr/bin/env bash
set -euo pipefail

kc_get() {
  # usage: kc_get "Service Name" "account"
  local service="${1:?service required}"
  local account="${2:?account required}"
  security find-generic-password -s "$service" -a "$account" -w 2>/dev/null || true
}

kc_set() {
  # usage: kc_set "Service Name" "account" "value"
  local service="${1:?service required}"
  local account="${2:?account required}"
  local value="${3:?value required}"
  security add-generic-password -a "$account" -s "$service" -w "$value" -U >/dev/null
}

kc_has() {
  # usage: kc_has "Service Name" "account"
  local service="${1:?service required}"
  local account="${2:?account required}"
  if security find-generic-password -s "$service" -a "$account" >/dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}

kc_generate() {
  # Prints a high-entropy password; prefers Python, falls back to OpenSSL
  if command -v python3 >/dev/null 2>&1; then
    python3 - <<'PY'
import secrets
print(secrets.token_urlsafe(32))
PY
  else
    # ~48 base64 bytes ~ 64 char token
    openssl rand -base64 48 | tr -d '\n'
  fi
}

kc_require_or_set() {
  # usage: kc_require_or_set "Service" "account"
  local service="${1:?service required}"
  local account="${2:?account required}"
  if ! kc_has "$service" "$account"; then
    local value
    value="$(kc_generate)"
    kc_set "$service" "$account" "$value"
    echo "Created new Keychain item: service='$service', account='$account'."
  else
    echo "Keychain item already present: service='$service', account='$account'."
  fi
}

cmd_runtime_env() {
  # Generate .env.runtime file from keychain values
  echo "Generating secure runtime environment file..."
  
  # Ensure required credentials exist in keychain
  kc_require_or_set "Ghost Backend" "JWT_SECRET"
  kc_require_or_set "Ghost Backend" "API_KEY"
  kc_require_or_set "Ghost Backend" "SECRET_KEY"
  
  # Get the actual values from keychain
  local JWT_SECRET
  local API_KEY
  local SECRET_KEY
  
  JWT_SECRET="$(kc_get "Ghost Backend" "JWT_SECRET")"
  API_KEY="$(kc_get "Ghost Backend" "API_KEY")"
  SECRET_KEY="$(kc_get "Ghost Backend" "SECRET_KEY")"
  
  # Generate runtime environment file with actual values
  cat > .env.runtime << EOF
# Ghost Backend Framework - Runtime Environment
# Generated from secure credential management
# This file is automatically generated - do not edit manually

# Export all environment variables for runtime use
export JWT_SECRET="$JWT_SECRET"
export API_KEY="$API_KEY"
export SECRET_KEY="$SECRET_KEY"

# Database Configuration
export DATABASE_URL="postgresql://postgres:@localhost:5432/ghost_db"
export DB_HOST="localhost"
export DB_PORT="5432"
export DB_NAME="ghost_db"
export DB_USER="postgres"
export DB_PASSWORD=""
export DB_DRIVER="postgresql"

# Redis Configuration
export REDIS_URL="redis://localhost:6379/0"

# Application Configuration
export ENVIRONMENT="development"
export DEBUG="true"
export PROJECT_NAME="Ghost Backend"

# Logging Configuration
export LOG_LEVEL="INFO"
export LOG_FILE="logs/app.log"
export LOG_MAX_SIZE="10MB"
export LOG_BACKUP_COUNT="5"
export LOG_FORMAT="json"
export LOG_TO_CONSOLE="true"
export LOG_COLORIZE="true"

# Development Settings
export PYTHONPATH="./src"

echo "✅ Runtime environment generated successfully from keychain"
EOF
  
  # Make the runtime file executable
  chmod +x .env.runtime
  
  echo "✅ Generated .env.runtime with secure credentials from keychain"
  echo "⚠️  Remember to add .env.runtime to .gitignore"
}

cmd_list() {
  # List keychain entries for Ghost Backend
  echo "Ghost Backend Framework keychain entries:"
  for account in JWT_SECRET API_KEY SECRET_KEY; do
    if kc_has "Ghost Backend" "$account"; then
      echo "  ✅ $account"
    else
      echo "  ❌ $account (missing)"
    fi
  done
}

cmd_setup() {
  echo "Setting up Ghost Backend Framework keychain credentials..."
  kc_require_or_set "Ghost Backend" "JWT_SECRET"
  kc_require_or_set "Ghost Backend" "API_KEY"
  kc_require_or_set "Ghost Backend" "SECRET_KEY"
  echo "✅ Keychain setup complete"
}

# Command dispatch
case "${1:-}" in
  list)
    cmd_list
    ;;
  setup)
    cmd_setup
    ;;
  runtime-env)
    cmd_runtime_env
    ;;
  *)
    echo "Usage: $0 [list|setup|runtime-env]"
    echo ""
    echo "Commands:"
    echo "  list       - List keychain entries"
    echo "  setup      - Initialize keychain with secure credentials"
    echo "  runtime-env - Generate .env.runtime file from keychain"
    exit 1
    ;;
esac
