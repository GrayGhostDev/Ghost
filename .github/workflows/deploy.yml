name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'production' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run deployment tests
      run: |
        python -m pytest tests/ -m "not slow"

    - name: Build Docker image
      run: |
        docker build -t ghost-backend:${{ github.sha }} .
        docker tag ghost-backend:${{ github.sha }} ghost-backend:latest

    - name: Deploy to staging
      if: ${{ inputs.environment == 'staging' || github.event_name == 'workflow_dispatch' }}
      run: |
        echo "üöÄ Deploying to staging environment"
        # Add your staging deployment commands here
        echo "Staging deployment completed"

    - name: Deploy to production
      if: ${{ inputs.environment == 'production' || github.event_name == 'release' }}
      run: |
        echo "üöÄ Deploying to production environment"
        # Add your production deployment commands here
        echo "Production deployment completed"

    - name: Notify deployment status
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const status = '${{ job.status }}';
          const environment = '${{ inputs.environment || 'production' }}';
          const emoji = status === 'success' ? '‚úÖ' : '‚ùå';
          
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: status === 'success' ? 'success' : 'failure',
            description: `Deployment to ${environment} ${status}`,
            context: `deploy/${environment}`
          });
