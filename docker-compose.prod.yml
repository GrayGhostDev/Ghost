services:
  backend:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    image: ghost-backend:production
    container_name: ghost-backend-prod
    ports:
      # Production should use reverse proxy, this is for container-to-container only
      - "127.0.0.1:8888:8888"
    environment:
      # Application settings
      - ENVIRONMENT=production
      - DEBUG=false
      - API_HOST=0.0.0.0
      - API_PORT=8888
      - WORKERS=4
      - LOG_LEVEL=warning
      
      # Database configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ghost
      - DB_USER=${DB_USER:-ghost_user}
      - DB_PASSWORD=${DB_PASSWORD}  # Must be provided
      
      # Redis configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      # Security keys (MUST be provided via .env file)
      - JWT_SECRET=${JWT_SECRET}
      - API_KEY=${API_KEY}
      
      # External services
      - ANTHROPIC_ADMIN_API_KEY=${ANTHROPIC_ADMIN_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GITHUB_PAT=${GITHUB_PAT}
      - BRAVE_API_KEY=${BRAVE_API_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Only mount data directories, not code
      - ghost_logs:/app/logs
      - ghost_uploads:/app/uploads
    networks:
      - ghost-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/health"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
  postgres:
    image: postgres:16-alpine
    container_name: ghost-postgres-prod
    environment:
      - POSTGRES_DB=ghost
      - POSTGRES_USER=${DB_USER:-ghost_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}  # Must be provided
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      # Performance tuning
      - POSTGRES_MAX_CONNECTIONS=100
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
      - POSTGRES_MAINTENANCE_WORK_MEM=64MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=16MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
      - POSTGRES_RANDOM_PAGE_COST=1.1
      - POSTGRES_EFFECTIVE_IO_CONCURRENCY=200
    # No ports exposed in production - internal only
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backup:/backup
    networks:
      - ghost-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-ghost_user} -d ghost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
  
  redis:
    image: redis:7-alpine
    container_name: ghost-redis-prod
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-backlog 511
      --tcp-keepalive 60
      --timeout 0
      --databases 16
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
      --requirepass ${REDIS_PASSWORD:-ghost_redis_2024}
    # No ports exposed in production - internal only
    expose:
      - "6379"
    volumes:
      - redis_data:/data
      - redis_backup:/backup
    networks:
      - ghost-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD:-ghost_redis_2024}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ghost-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx-example.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - ghost-network
    restart: always
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  ghost-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  # Production volumes with backup support
  postgres_data:
    driver: local
  postgres_backup:
    driver: local
  redis_data:
    driver: local
  redis_backup:
    driver: local
  ghost_logs:
    driver: local
  ghost_uploads:
    driver: local
  nginx_ssl:
    driver: local
  nginx_logs:
    driver: local