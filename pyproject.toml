[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ghost-backend"
version = "1.0.0"
description = "Comprehensive backend development foundation for all projects"
authors = [
    {name = "Gray Ghost Data Consultants", email = "curtis@grayghostdata.com"},
]
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Database",
    "Topic :: System :: Logging",
]
keywords = ["backend", "framework", "api", "database", "authentication", "logging"]
dependencies = [
    "pydantic>=2.5.0",
    "loguru>=0.7.2",
    "python-decouple>=3.8",
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",
    "cryptography>=41.0.0",
]

[project.optional-dependencies]
web = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "slowapi>=0.1.9",
]
database = [
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg[binary]>=3.1.0",
    "redis>=5.0.0",
    "pymongo>=4.6.0",
]
auth = [
    "pyjwt>=2.8.0",
    "bcrypt>=4.1.0",
    "passlib[bcrypt]>=1.7.4",
]
email = [
    "aiosmtplib>=3.0.0",
    "jinja2>=3.1.0",
]
tasks = [
    "schedule>=1.2.0",
]
storage = [
    "aiofiles>=23.0.0",
    "pillow>=10.0.0",
    "python-magic>=0.4.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
]
all = [
    "ghost-backend[web,database,auth,email,tasks,storage]",
]

[project.urls]
Homepage = "https://github.com/grayghostdev/ghost-backend"
Documentation = "https://github.com/grayghostdev/ghost-backend/wiki"
Repository = "https://github.com/grayghostdev/ghost-backend.git"
Issues = "https://github.com/grayghostdev/ghost-backend/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"ghost" = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["ghost"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=src/ghost",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=10",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/ghost"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\:",
    "@(abc\\.)?abstractmethod",
]
